"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const BodyField_1 = require("../BodyField");
const requestEntityTooLarge_1 = __importDefault(require("../util/requestEntityTooLarge"));
const getFieldPath_1 = __importDefault(require("../util/getFieldPath"));
const castType_1 = __importDefault(require("../util/castType"));
const createOnField = ({ castTypes, limits }, entries) => (name, value, fieldnameTruncated, valueTruncated, enc, type) => {
    if (valueTruncated) {
        return void entries.emit("error", requestEntityTooLarge_1.default(`Field size limit exceeded: Available up to ${limits.fieldSize} bytes per field.`));
    }
    entries.enqueue();
    try {
        if (castTypes) {
            value = castType_1.default(String(value));
        }
        const path = getFieldPath_1.default(name);
        entries.pull([
            path,
            new BodyField_1.BodyField(value, name, {
                fieldnameTruncated,
                valueTruncated,
                type,
                enc
            })
        ]);
    }
    catch (error) {
        entries.emit("error", error);
    }
};
exports.default = createOnField;
